SERVER -------------------------------------------------------------

Should probably start tracking user data. In particular, listening history
but last login could be useful. 

Update history needs to be added to AlbumCache for sorts.

? Add hooks on update functions to update all dependent datasets. High
? priority, this will simplify code greatly in many other places.
? - not sure what we can do here, other than updating totals. 

Building album and artist caches is really, really slow. I suspect that
we're doing something really, really wrong.

 x   Add "random albums" method. I'm thinking expose a "sort=" parameter on 
 x   /albums (everything else for that matter, too).
 x  DONE

Other parameters: "filter=", "search=". This will be complicated, we might
have to rethink the data structures to allow for efficient querying. I
would assume that we'd want these to be case insensitive, so the AlbumMap/
ArtistMap would be a good place to start. Do we need to build explicit 
prefix trees for filter?

 x  filter partially implemented (/albums?artist=a)
 -  reversed word indexes will be perfect for search, need to decide on
 -  data layout ( global? artist, album, song separate? need data structures
 -  for global search results )

Look into generalizing the index / cache structures. There's going to be
a ton of index updating code needed the way things are currently, maybe
we can simplify the whole thing.

Add method to add / update album art. maybe: PUT or POST /albums/art. This 
should allow for adding by file upload and adding by url - GET to be 
performed by http client on the server

Last.FM integration - need data structures for storage of metadata. Should 
this be mixed in with local information or separate?

Jobs system - catalog scans, art gathering, exernal api scans will be 
classified as "jobs". These should be started by a POST request to /jobs 
and forked asynchronously. status / results of jobs can be fed to 
persistence layer from the jobs themselves and then retrieved with a GET 
request. 

Authentication - second phase of authentication needs to be implemented. 
all requests that modify data on the server need stronger authentication. 
Current plan is to require the url query string (including a nonce - 
current auth timestamp ok?) be hashed on every such request.
    
JS ------------------------------------------------------------------

How will we interact with objects other than albums? If Last.FM can give
us good coverage on artist art, we should be able to use the same style
but songs are certainly going to be different. I'm thinking a song viewer
as a sidebar for song results and/or playlists would be nice.

Seriously need to start work on the administrative interface. Eventually
going to need a "jobs" section, a "users" section.

Now Playing? Recently Played? Now Playing would be hard with how the HTTP
streaming is set up now, server side work would be required to get triggers
on what's happening after a stream uri is hit.

Investigate URL rewriting. Albums / artists / etc. should be bookmarkable, and 
should be able to be be shared.

